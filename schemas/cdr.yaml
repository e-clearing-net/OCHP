CDRInfo:
  type: object
  description: Contains CDRs according to the status specified in the request and contains all information concerning a Charge Data Record.
  required:
    - cdrId
    - evseId
    - emtId
    - contractId
    - status
    - startDateTime
    - endDateTime
    - chargePointAddress
    - chargePointType
    - connectorType
    - chargingPeriods
    - currency

  properties:
    cdrId:
      # Unique charge data record identifier. EvseId is incorporated into the CDR-ID to make it explicit who the CPO is.
      $ref: '#/CdrId'

    evseId:

      # Unique identifier for every EVSE following a common scheme with a major id-unit reflecting the country and the market partner issuing it.
      $ref: 'generic.yaml#/EvseId'

    emtId:

      # Utilised token for this charging session.
      $ref: 'emtId.yaml#/EmtId'

    contractId:

      # Identifies a customer in the electric mobility charging context.
      $ref: 'generic.yaml#/ContractId'

    sessionId:
      type: string
      minLength: 0
      maxLength: 42
      description: 'an external Session Id, e.g. the directId in case of ochp-direct.'
      example: 'DA5347F3-DF2F-4BA6-905D-21E2FFAAA937'

    status:

      # Current status of the CDR.
      # Must be set to 'new' by the issuing CMS. Shall not be changed by any partner but only by the CHS.
      # Should be set to 'new' when the CPO adds the CDR for the first time and status 'revised' when the CPO re-uploads the CDR after it was accepted/decined in the previous upload.
      # CPO should also be able to add the declined CDRs finally with status 'rejected'.
      $ref: '#/CdrStatusType'

    startDateTime:

      # Start date and time of the charge session (login with the RFID badge). Local time of the charge point is used.
      $ref: 'generic.yaml#/LocalDateTimeType'


    endDateTime:

      # End date and time of the charge session (log-off with the RFID badge or physical disconnect). Must be set in the local time of the charge point.
      $ref: 'generic.yaml#/LocalDateTimeType'


    durationInSeconds:
          type: integer
          example: 120
          description: duration of the whole charingSession in seconds

    chargePointAddress:

      # Contains the address of the charging station.

      $ref: 'generic.yaml#/AddressType'

    chargePointType:
      # Type of the charge point.

      $ref: 'generic.yaml#/ChargePointType'


    connectorType:

      # Type of the utilized socket or connector.
      $ref: 'connector.yaml#/ConnectorType'

    ratings:

      # ratings applicable to this charge point.
      $ref:  'generic.yaml#/RatingsType'

    meterId:
      type: string
      minLength: 1
      maxLength: 20
      description: Written identification number of the physical energy meter, provided by the manufacturer. For future use.

    meteringInfo:
      #  to serve the German Eichrecht.
      $ref:  '#/MeteringInfoType'

    chargingPeriods:
      type: array
      items:
        $ref:  '#/CdrPeriodType'

    totalCost:
      type: number
      format: float
      example: 13.44
      description: Total cost (nett price, without VAT) for the entire charging process. Should always equal the sum of the individual periodCosts.

    currency:
      $ref: 'generic.yaml#/Currency'


CdrId:
  type: string
  minLength: 6
  maxLength: 48
  description: The CDR-ID is a unique identifier for charge data records. EvseId is incorporated into the CDR-ID to make it explicit who the CPO is.  It is composed of the CPO-ID followed by an alphanumeric instance of up to 43 characters. The length of the string is extended from “36” to “48”.
  pattern: '^[0-9A-Z]{6,48}$'
  example: DESWU27429470131590851591774794405



MeteringInfoType:
  type: object
  required:
    - type

  properties:
    supportType:
      $ref: 'generic.yaml#/MeteringInfoSupportType'
    fileId:
      type: string
      minLength: 1
      maxLength: 36
      example: 'DA5347F3-DF2F-4BA6-905D-21E2FFAAA948'

MeteringInfoFileType:
  type: object
  required:
    - content
    - fileType
  properties:
    id:
      $ref: 'generic.yaml#/Uuid'
      description: 'id of the meteringInfoFile'
    content:
      type: string
      minLength: 1
      maxLength: 500000
      description: 'base64 encoded content of the file.'
    version:
      type: string
      minLength: 1
      maxLength: 36
      description: 'optional version '
    name:
      type: string
      minLength: 1
      maxLength: 36
      description: 'optional name of the file'
    type:
      type: string
      enum:
        - OCMF
        - METRA
        - RTB
        - OTHER

MeteringData:
  type: string
  minLength: 1
  maxLength: 255
  description: Contains at least the starting and ending meter values of a certain charging session


CdrStatusType:
  type: string
  # The status values possible when a CPO uploads/re-uploads a CDR are new/revised respectively. When the CPO decides to finally forego the payment of a declined CDR, it shold be able to upload them as 'rejected' (POST CDRs).
  # The status values possible when a CPO wants to check the CDR it posted, are 'declined/rejected/approved'. When no values are set by the CPO, eCHS returns the CDRs with status 'Declined'.(GET /CDRs/CheckCDRs)
  # The status values possible when an EMSP fetches CDRs from eCHS are accepted/revised/rejected/approved.When no values are set by the EMSP, eCHS returns the CDRs with status 'accepted and revised'.(GET /CDRs)
  description: Defines which status of CDRs to return.Available statuses are accepted, revised, rejected, approved.  Reflects the current status of the CDR. This is reflecting the status of internal processing in the clearing house. The value cannot be changed by the partner's systems directly. Implicit changes are made while uploading (including revised, rejected CDRs), approving or declining CDRs.
    * 'new' - A new CDR before upload to the CHS.
    * 'accepted'- An uploaded CDR was accepted by the CHS as plausible.
    * 'rejected'- The checked CDR again rejected by the CHS and is to be archived.
    * 'declined'- The CDR was declined by the owner (EMSP).
    * 'approved'- The CDR was approved by the owner (EMSP).
    * 'revised'- The CDR was revised by the CPO and uploaded again. Only previously accepted or declined CDRs can be revised.
  # Reflects the current status of the CDR. This is reflecting the status of internal processing in the clearing house. The value cannot be changed by the partner's systems directly. Implicit changes are made while uploading (including revised, rejected CDRs), approving or declining CDRs.
  enum:
    - new
    - accepted
    - rejected
    - declined
    - approved
    - revised



CdrPeriodType:
  type: object
  description: This class defines one time and billing period in the charge detail record. Two periods may overlap in time. Each period represents one billing item of the charging process.
  required:
    - startDateTime
    - endDateTime
    - billingItem
    - billingValue
    - itemPrice
  properties:

    startDateTime:
      # Starting time of the period. Must be equal or later than startDateTime of the CDRInfo.
      $ref: 'generic.yaml#/LocalDateTimeType'

    endDateTime:
      # Ending time of the period. Must be equal or earlier than endDateTime of the CDRInfo.
      $ref: 'generic.yaml#/LocalDateTimeType'

    billingItem:
      # Defines what the EMSP is charged for during this period.
      $ref: '#/BillingItemType'

    billingValue:
      type: number
      format: float
      description: The value the EMSP is charged for. The unit of this value depends on the billingItem.

    itemPrice:
      type: number
      format: float
      description: Price per unit of the billingItem in the given currency.

    periodCost:
      type: number
      format: float
      description: Total cost of the period in the given currency.

    taxrate:
      type: integer
      description: Tax rate in percent to be paid for the charging process in the EVSE operator's country.

BillingItemType:
  type: string
  description: The billing items for charging periods and tariffs.
    * 'parkingtime'-  Price for the time of parking. The billingValue represents the time in hours.
    * 'usagetime'-  Price for the time of EVSE usage. The billingValue represents the time in hours.
    * 'energy'-  Price for the consumed energy. The billingValue represents the energy in kilowatt-hours.
    * 'power'-  Price for the used power level. The billingValue represents the maximum power in kilowatts.
    * 'serviceFee'  General service fee per charging process. The billingValue represents a multiplier and thus has to be set to "1.0".
    * 'reservation'-  One time fee for a reservation of the EVSE. The billingValue represents a multiplier and thus has to be set to "1.0".
    * 'reservationtime'-  Price for the duration of a reservation. The billingValue represents the time in hours.
    * 'volume' - Price for the quantity used in liter.
    * 'mass' - Price for the quantity used in kilogram (kg).

  enum:
    - parkingtime
    - usagetime
    - energy
    - power
    - serviceFee
    - reservation
    - reservationtime
    - volume
    - mass
